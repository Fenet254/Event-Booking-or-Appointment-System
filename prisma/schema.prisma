generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      String   @default("user") // user, admin
  points    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bookings  Booking[]
  reviews   Review[]
  events    Event[]  @relation("Organizer")
  badges    UserBadge[]
  notifications Notification[]
}

model Category {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  events      Event[]
}

model Tag {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  events Event[]
}

model Event {
  id            Int       @id @default(autoincrement())
  title         String
  description   String?
  aiDescription String?   // AI-generated enhanced description
  location      String?
  startAt       DateTime
  endAt         DateTime
  capacity      Int       @default(0)
  createdAt     DateTime  @default(now())
  categoryId    Int?
  category      Category? @relation(fields: [categoryId], references: [id])
  organizerId   Int?
  organizer     User?     @relation("Organizer", fields: [organizerId], references: [id])
  imageUrl      String?
  price         Float     @default(0)
  isVirtual     Boolean   @default(false)
  tags          Tag[]
  bookings      Booking[]
  reviews       Review[]
  recommendations Recommendation[]
  blockchainHash String?  // Mock blockchain hash for tickets
  arModelUrl    String?   // URL for AR/VR model
  mlScore       Float?    // ML prediction score for popularity
}

model Booking {
  id            Int      @id @default(autoincrement())
  event         Event    @relation(fields: [eventId], references: [id])
  eventId       Int
  user          User?    @relation(fields: [userId], references: [id])
  userId        Int?
  name          String
  email         String
  seats         Int      @default(1)
  createdAt     DateTime @default(now())
  status        String   @default("confirmed")
  paymentStatus String   @default("pending") // pending, paid, failed
  paymentId     String?
}

model Review {
  id        Int      @id @default(autoincrement())
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  rating    Int      // 1-5
  comment   String?
  createdAt DateTime @default(now())
}

model Badge {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  description String?
  icon        String?
  users       UserBadge[]
}

model UserBadge {
  id       Int     @id @default(autoincrement())
  user     User    @relation(fields: [userId], references: [id])
  userId   Int
  badge    Badge   @relation(fields: [badgeId], references: [id])
  badgeId  Int
  earnedAt DateTime @default(now())

  @@unique([userId, badgeId])
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  message   String
  type      String   // booking, review, etc.
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Recommendation {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   Int
  score     Float    // AI recommendation score
  reason    String?  // AI-generated reason
  createdAt DateTime @default(now())

  @@unique([userId, eventId])
}
